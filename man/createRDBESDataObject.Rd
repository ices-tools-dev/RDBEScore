% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createRDBESDataObject.R
\name{createRDBESDataObject}
\alias{createRDBESDataObject}
\title{Create an RDBES Data Object}
\usage{
createRDBESDataObject(
  input = NULL,
  listOfFileNames = NULL,
  castToCorrectDataTypes = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{input}{Strings or \code{list} object. The path to the zip file downloaded
from RDBES (or multiple zip files - see details), or path to a folder of
\code{csv} files, or a \code{list} object in the current environment containing data
frames of each table. If \code{NULL} an empty \code{RDBESDataObject} is created.}

\item{listOfFileNames}{\code{list} of Strings, Optional. For use with \code{csv} inputs
only, and only required if the csv file names are \emph{not} the default file
names used by RDBES when downloading data (for instance if you created the
files yourself). The actual file names should be a \code{list} of the two-letter
code for the relevant table e.g. \code{list("DE" = "DE.csv", "SD" = "SD.csv", etc.)}.  If not used then it is assumed the files have the default file
names used by the RDBES data download ("Design.csv" etc).}

\item{castToCorrectDataTypes}{Logical. If \code{TRUE} then the function will
attempt to cast the required columns to the correct data type.  If \code{FALSE}
then the column data types will be determined by how the csv files are read
in. Default is \code{TRUE}.}

\item{verbose}{(Optional) Set to TRUE if you want informative text printed
out, or FALSE if you don't.  The default is FALSE.}

\item{...}{Additional parameters forwarded to helper functions used by this
function. Most commonly these are forwarded to
\code{validateRDBESDataObject()} during the validation step. Common options:
\itemize{
\item \code{strict} (logical, default \code{TRUE}): if \code{FALSE}, validation issues result
in warnings instead of stopping with an error.
\item \code{verbose} (logical, default \code{FALSE}): request extra informational output
from validation.
\item \code{Hierarchy} (integer, e.g. \code{1}, optional; zip inputs only): when the zip
file contains multiple hierarchies, selects which hierarchy to import.
Note: \code{checkDataTypes} is controlled by the \code{castToCorrectDataTypes}
argument of this function and should not be supplied via \code{...}.
}}
}
\value{
A RDBESDataObject
}
\description{
This function lets you create an RDBES Data object in your current R
environment.
}
\details{
The \code{input} should be either:
\itemize{
\item A \code{zip} file downloaded from RDBES (or multiple zip files if you want to include or overwrite tables, for example CL and CE data). NOTE: Only the downloaded
RDBES data with Table data format with ids is loaded by this function and not the uploaded format.
\item A folder containing \code{csv} files downloaded from RDBES (e.g. the unzipped file), or any set of csv files of the RDBES tables.
\item A \code{list} of data frames in the current environment representing different tables in the hierarchy.
\item A \code{NULL} input will return and empty RDBES data object
}

\emph{\strong{ZIP file inputs}}
This \code{input} should be a path to a zip file downloaded from RDBES. Multiple
zip files can be entered if you want to include additional tables, for
example CL and CE. E.g. `input = c("path/to/H1.zip", "path/to/CL.zip"). If
any tables in the first input are overwritten by other inputs a warning is
given. You should not input different hierarchy files; this function will not
combine them.

If the zip contains multiple hierarchies (e.g., H1 and H5 within the same
archive), you can select which one to import by passing \code{Hierarchy} via
\code{...}, for example: \code{Hierarchy = 1}. If \code{Hierarchy} is not specified and the
zip contains multiple hierarchies, an error is raised prompting you to set it.

\emph{\strong{CSV file inputs}}
This \code{input} should be a path to a folder of \code{csv} files. These can be the
\code{csv} files downloaded from RDBES (e.g. an unzipped hierarchy), or \emph{any} set
of csv files containing RDBES tables. If the files do not have the default
RDBES name (e.g. 'Design.csv') the \code{listOfFileNames} input can by used to
specify the file names e.g. \code{list("DE" = "DE.csv", "SD" = "SD.csv", etc.)}.

\emph{\strong{List of data frames inputs}}
This \code{input} should be a \code{list} object containing data frames (or
data.tables) for each table in your hierarchy. They should be named with the
appropriate 2-letter code (\code{DE}, \code{SD}, etc.). Columns within these tables
will be renamed to the RDBES model documentation 'R name'. Note if you choose
to create an \code{RDBESDAtaObject} from local data frames these may have not
passed the data integrity checks performed when you upload to RDBES!

\emph{\strong{NULL inputs}}
This \code{input} produces an empty \code{RDBESDataObject}, i.e. all tables with
correct data classes but the tables will be empty.
}
\examples{
# Create an empty object
myEmptyRDBESObject <- createRDBESDataObject(input = NULL)
}
