% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filterRDBESDataObject.R
\name{filterRDBESDataObject}
\alias{filterRDBESDataObject}
\title{Filter an RDBESDataObject}
\usage{
filterRDBESDataObject(
  RDBESDataObjectToFilter,
  fieldsToFilter,
  valuesToFilter,
  killOrphans = FALSE,
  verbose = FALSE,
  strict = TRUE
)
}
\arguments{
\item{RDBESDataObjectToFilter}{The \code{RDBESDataObject} to filter}

\item{fieldsToFilter}{A vector of the field names you wish to check}

\item{valuesToFilter}{A vector of the field values you wish to filter for}

\item{killOrphans}{Controls if orphan rows are removed. Default is \code{FALSE}.}

\item{verbose}{(Optional) Set to TRUE if you want informative text printed
out, or FALSE if you don't.  The default is FALSE.}

\item{strict}{(Optional) This function validates its input data - should
the validation be strict? The default is TRUE.}
}
\value{
the filtered input object of the same class as
\code{RDBESDataObjectToFilter}
}
\description{
The returned object will include all rows which either: a) do not included
any of the field names in \code{fieldsToFilter}, or b) do include the field names
and have one of the allowed values in \code{valuesToFilter}.
If you want to filter for a id field like \code{DEid}, \code{FTid} etc, the filtering
works only on the table where the id field is its key. For example, if you
try to filter on \code{FOid} it does not look  \code{FOid} in other tables like \code{FT},
although the field \code{FOid} exists in \code{FT} table.
}
\details{
\code{killOrphans} allows you to remove orphaned rows if set to \code{TRUE}. The
default is \code{FALSE}.
}
\examples{
\dontrun{

myH1RawObject <-
  importRDBESDataCSV(rdbesExtractPath = "tests\\\\testthat\\\\h1_v_1_19")

myFields <- c("SDctry", "VDctry", "VDflgCtry", "FTarvLoc")
myValues <- c("ZW", "ZWBZH", "ZWVFA")

myFilteredObject <- filterRDBESDataObject(myH1RawObject,
  fieldsToFilter = myFields,
  valuesToFilter = myValues
)

# Inverse filtering (exclude certain values)
# Example: keep all DE rows except those with DEid in `excludedValues`
# Compute the complement of the excluded set using setdiff
allValues <- unique(myH1RawObject$DE$DEid)
excludedValues <- c(5351)
myInverseFiltered <- filterRDBESDataObject(
  myH1RawObject,
  fieldsToFilter = "DEid",
  valuesToFilter = setdiff(allValues, excludedValues)
)
}
}
