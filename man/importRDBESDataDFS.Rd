% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/importRDBESDataDFS.R
\name{importRDBESDataDFS}
\alias{importRDBESDataDFS}
\title{Convert List of Data Frames to a  RDBES Data Object}
\usage{
importRDBESDataDFS(myList, castToCorrectDataTypes = TRUE, strict = TRUE)
}
\arguments{
\item{myList}{A list of data tables. Each element of the list should be a
data frame or NULL.}

\item{castToCorrectDataTypes}{A logical value indicating whether to cast the
columns to the correct data types. Default is TRUE.}

\item{strict}{(Optional) This function validates the RDBESDataObject it
creates - should the validation be strict? The default is TRUE.}
}
\value{
An RDBESDataObject with each element being a data table from the
  input list.
}
\description{
This function converts a list of data frames into an RDBESDataObject.
}
\details{
The function first defines a helper function, `makeDT`, which
converts its input into a data table using `data.table::as.data.table`. If
the input is NULL, it returns NULL.

It then uses the `RDBEScore::newRDBESDataObject` function to create a new
RDBESDataObject, with each element being the result of applying `makeDT` to
the corresponding element of `myList`.

The function then iterates over each element of `dt`. If an element is a data
table, it sets a key on it using the 'XXid' column as the key, where 'XX' is
the name of the data table. It also renames the columns according to
`RDBEScore::mapColNamesFieldR$R.Name`, and replaces all empty strings with
NA.

If `castToCorrectDataTypes` is TRUE, it then ensures all columns are of the
correct data type using `RDBEScore:::setRDBESDataObjectDataTypes`.

Finally, it validates the RDBESDataObject using
`RDBEScore::validateRDBESDataObject` and returns it.
}
